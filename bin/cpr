#!/bin/bash

source $(dirname $0)/common/init
source $(dirname $0)/common/origin
source $(dirname $0)/common/github
source $(dirname $0)/common/request_review
source $(dirname $0)/common/set_assignees
source $(dirname $0)/common/trunk

BRANCH=$(git symbolic-ref --short -q HEAD)
if [ "$BRANCH" = $TRUNK ]
then
    echo -e $ERROR_BEGIN"Current branch is $BRANCH, aborting."$ERROR_END
    exit 1
fi

if [[ $# -eq 1 ]] && [[ $1 != -* ]]
then
    # this supports the un-switched branch syntax
    BASE_BRANCH=$1
    TIP_BRANCH=$BRANCH
else
    if [ ! -z $UPSTREAM ]
    then
        BASE_BRANCH=$TRUNK
        TIP_BRANCH=${ORIGIN%/*}:$BRANCH
        ORIGIN=$UPSTREAM
    else
        BASE_BRANCH=$TRUNK
        TIP_BRANCH=$BRANCH
    fi
fi

while getopts 'b:t:a' flag; do
    case "${flag}" in
        b) BASE_BRANCH="${OPTARG}" ;;
        t) TEMPLATE_EXTENSION="${OPTARG}" ;;
        a) SET_ASSIGNEES=yes ;;
        *) error "Unexpected option ${flag}" ;;
    esac
done

echo Preparing PR for $TIP_BRANCH against $BASE_BRANCH

mkdir -p /tmp/$ORIGIN
FORM=/tmp/$ORIGIN/cprb.out
FORMSWP=/tmp/$ORIGIN/.cprb.out.swp
# if vim remnant exists, then we probably already have a PR in progress
if [ -e $FORMSWP ]
then
    echo -e $ERROR_BEGIN"cpr already in progress for this repo, aborting."$ERROR_END
    exit 1
fi

if [ -z "$(git branch -r --contains HEAD | grep $BRANCH)" ]
then
    echo Pushing your local work...
    git push origin $BRANCH || exit 1
fi

TITLE=$(echo $BRANCH | sed -e 's/[_-]/ /g' | awk '{for (i=1;i<=NF;i++) $i=toupper(substr($i,1,1)) substr($i,2)} 1')

# create template if last time was not error
if [ ! -s $FORM ]
then
CONFIG_PATH=$(dirname ${BASH_SOURCE[0]})/../config
CONFIG_PATH=$(cd $CONFIG_PATH; pwd)
if [ -s $CONFIG_PATH/cpr.$TEMPLATE_EXTENSION ]
then
SRC_PATH=$CONFIG_PATH/cpr.$TEMPLATE_EXTENSION
elif [ -s $CONFIG_PATH/cpr.custom ]
then
SRC_PATH=$CONFIG_PATH/cpr.custom
else
SRC_PATH=$CONFIG_PATH/cpr.default
fi
echo Using template $SRC_PATH
# using eval with EOF is dangerous; infosec requests we maintain that configs are generated by trusted users
eval "cat <<EOF
$(<$SRC_PATH)
EOF
" > $FORM
fi

if [ -z "$EDITOR" ]
then
    nano $FORM
else
    $EDITOR $FORM
fi

if [ ! -s $FORM ]
then
    echo -e $ERROR_BEGIN"Empty data, aborting."$ERROR_END
    rm $FORM
    exit 1
fi 
# make newlines
FORMN=$FORM.n
sed -E 's/^([^"{}])/\\n\1/g' $FORM > $FORMN

OUT=/tmp/$ORIGIN/cpr.$$.err
echo Sending pull request...
curl -H "Authorization: token $(<$GITHUB_TOKEN)" --data @$FORMN $GITHUB_API/repos/$ORIGIN/pulls > $OUT 2>/dev/null
URL=$(grep -m1 html_url $OUT | sed 's/"html_url": "//g' | sed 's/",//g')
if [ -z "$URL" ]
then
    echo -e $ERROR_BEGIN"Failed to create pull request:"$ERROR_END
    cat $OUT
    exit 1
fi

echo $URL \(copied to clipboard\)
echo $URL | pbcopy # copy to clipboard        
open $URL

# get issue number
ISSUE_NUMBER=$(echo $URL | sed -E 's/.*\/(\d*)//g')

echo Setting reviewers...
# set reviewers
sed -E -i .bak -ne 's/\\nReviewers? (@\w*\s?)/\1/gp' $FORMN
sed -E -i .bak -e 's/ @/","/g' $FORMN
sed -E -i .bak -e 's/@/"/g' $FORMN
sed -E -i .bak -e 's/$/"/g' $FORMN

REVIEWERS="[ $(<$FORMN) ]"

request_review $ORIGIN $ISSUE_NUMBER "$REVIEWERS"

if [ ! -z "$SET_ASSIGNEES" ]
then
    echo Setting assignees...
    set_assignees $ORIGIN $ISSUE_NUMBER "$REVIEWERS"
fi

rm -f $FORM $FORMN $OUT
